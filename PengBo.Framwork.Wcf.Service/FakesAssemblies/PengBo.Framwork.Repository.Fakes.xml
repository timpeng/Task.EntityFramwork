<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PengBo.Framwork.Repository.Fakes</name>
    </assembly>
    <members>
        <member name="T:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1">
            <summary>PengBo.Framwork.Repository.BaseRepository`1 的填充码类型</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.#ctor(PengBo.Framwork.Repository.BaseRepository{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.GetEntitiesPagingOf1ExpressionOfFuncOfT0BooleanExpressionOfFuncOfT0M0Int32Int32DoubleOutInt32Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,System.Double,System.Int32,System.Linq.IQueryable{`0}})">
            <summary>设置 BaseRepository`1.GetEntitiesPaging(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; wherExpression, Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; orderExpression, Int32 size, Int32 index, Double&amp; pages, Int32&amp; total) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.BulkDeleteIEnumerableOfT0">
            <summary>设置 BaseRepository`1.BulkDelete(IEnumerable`1&lt;!0&gt; model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.BulkInsertIEnumerableOfT0">
            <summary>设置 BaseRepository`1.BulkInsert(IEnumerable`1&lt;!0&gt; model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.BulkSaveChangeAsync">
            <summary>设置 BaseRepository`1.BulkSaveChangeAsync() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.BulkUpdateIEnumerableOfT0">
            <summary>设置 BaseRepository`1.BulkUpdate(IEnumerable`1&lt;!0&gt; model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.ConstructorDbContext">
            <summary>设置 BaseRepository`1.BaseRepository`1(DbContext db) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.DbGet">
            <summary>设置 BaseRepository`1.get_Db() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.DbSetDbContext">
            <summary>设置 BaseRepository`1.set_Db(DbContext value) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.DbSetGet">
            <summary>设置 BaseRepository`1.get_DbSet() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.DbSetSetDbSetOfT0">
            <summary>设置 BaseRepository`1.set_DbSet(DbSet`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.DeleteAsyncExpressionOfFuncOfT0Boolean">
            <summary>设置 BaseRepository`1.DeleteAsync(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; wherExpression) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.DeleteAsyncIEnumerableOfT0">
            <summary>设置 BaseRepository`1.DeleteAsync(IEnumerable`1&lt;!0&gt; model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.DeleteAsyncT0">
            <summary>设置 BaseRepository`1.DeleteAsync(!0 model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.DeleteT0">
            <summary>设置 BaseRepository`1.Delete(!0 model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.Dispose">
            <summary>设置 BaseRepository`1.Dispose() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.ExecuteSqlCommandAsyncStringObjectArray">
            <summary>设置 BaseRepository`1.ExecuteSqlCommandAsync(String sql, Object[] param) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.GetCountAsync">
            <summary>设置 BaseRepository`1.GetCountAsync() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.GetEntitiesAsync">
            <summary>设置 BaseRepository`1.GetEntitiesAsync() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.GetEntitiesAsyncExpressionOfFuncOfT0Boolean">
            <summary>设置 BaseRepository`1.GetEntitiesAsync(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; whereExpression) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.GetEntityAsync">
            <summary>设置 BaseRepository`1.GetEntityAsync() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.GetEntityAsyncExpressionOfFuncOfT0Boolean">
            <summary>设置 BaseRepository`1.GetEntityAsync(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; whereExpression) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.InsertAsyncIEnumerableOfT0">
            <summary>设置 BaseRepository`1.InsertAsync(IEnumerable`1&lt;!0&gt; model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.InsertAsyncT0">
            <summary>设置 BaseRepository`1.InsertAsync(!0 model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.InsertT0">
            <summary>设置 BaseRepository`1.Insert(!0 model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.IsEmptyGet">
            <summary>设置 BaseRepository`1.get_IsEmpty() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.SaveChangeAsync">
            <summary>设置 BaseRepository`1.SaveChangeAsync() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.SaveChanges">
            <summary>设置 BaseRepository`1.SaveChanges() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.SqlQueryAsyncStringObjectArray">
            <summary>设置 BaseRepository`1.SqlQueryAsync(String sql, Object[] param) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.Tran_BeginAction">
            <summary>设置 BaseRepository`1.Tran_Begin(Action action) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.UpdateAsyncT0">
            <summary>设置 BaseRepository`1.UpdateAsync(!0 model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.UpdateAsyncT0StringArray">
            <summary>设置 BaseRepository`1.UpdateAsync(!0 model, String[] param) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.UpdateT0">
            <summary>设置 BaseRepository`1.Update(!0 model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1._BulkSaveChangeAsyncb__4">
            <summary>设置 BaseRepository`1.&lt;BulkSaveChangeAsync&gt;b__4() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1._GetCountAsyncb__3a">
            <summary>设置 BaseRepository`1.&lt;GetCountAsync&gt;b__3a() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1._GetEntitiesAsyncb__32">
            <summary>设置 BaseRepository`1.&lt;GetEntitiesAsync&gt;b__32() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1._GetEntityAsyncb__36">
            <summary>设置 BaseRepository`1.&lt;GetEntityAsync&gt;b__36() 的 填充码</summary>
        </member>
        <member name="T:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.GetEntitiesPagingOf1ExpressionOfFuncOfT0BooleanExpressionOfFuncOfT0M0Int32Int32DoubleOutInt32Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{PengBo.Framwork.Repository.BaseRepository{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,System.Double,System.Int32,System.Linq.IQueryable{`0}})">
            <summary>设置 BaseRepository`1.GetEntitiesPaging(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; wherExpression, Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; orderExpression, Int32 size, Int32 index, Double&amp; pages, Int32&amp; total) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.BulkDeleteIEnumerableOfT0">
            <summary>设置 BaseRepository`1.BulkDelete(IEnumerable`1&lt;!0&gt; model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.BulkInsertIEnumerableOfT0">
            <summary>设置 BaseRepository`1.BulkInsert(IEnumerable`1&lt;!0&gt; model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.BulkSaveChangeAsync">
            <summary>设置 BaseRepository`1.BulkSaveChangeAsync() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.BulkUpdateIEnumerableOfT0">
            <summary>设置 BaseRepository`1.BulkUpdate(IEnumerable`1&lt;!0&gt; model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.DbGet">
            <summary>设置 BaseRepository`1.get_Db() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.DbSetDbContext">
            <summary>设置 BaseRepository`1.set_Db(DbContext value) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.DbSetGet">
            <summary>设置 BaseRepository`1.get_DbSet() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.DbSetSetDbSetOfT0">
            <summary>设置 BaseRepository`1.set_DbSet(DbSet`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.DeleteAsyncExpressionOfFuncOfT0Boolean">
            <summary>设置 BaseRepository`1.DeleteAsync(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; wherExpression) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.DeleteAsyncIEnumerableOfT0">
            <summary>设置 BaseRepository`1.DeleteAsync(IEnumerable`1&lt;!0&gt; model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.DeleteAsyncT0">
            <summary>设置 BaseRepository`1.DeleteAsync(!0 model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.DeleteT0">
            <summary>设置 BaseRepository`1.Delete(!0 model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.Dispose">
            <summary>设置 BaseRepository`1.Dispose() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.ExecuteSqlCommandAsyncStringObjectArray">
            <summary>设置 BaseRepository`1.ExecuteSqlCommandAsync(String sql, Object[] param) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.GetCountAsync">
            <summary>设置 BaseRepository`1.GetCountAsync() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.GetEntitiesAsync">
            <summary>设置 BaseRepository`1.GetEntitiesAsync() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.GetEntitiesAsyncExpressionOfFuncOfT0Boolean">
            <summary>设置 BaseRepository`1.GetEntitiesAsync(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; whereExpression) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.GetEntityAsync">
            <summary>设置 BaseRepository`1.GetEntityAsync() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.GetEntityAsyncExpressionOfFuncOfT0Boolean">
            <summary>设置 BaseRepository`1.GetEntityAsync(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; whereExpression) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.InsertAsyncIEnumerableOfT0">
            <summary>设置 BaseRepository`1.InsertAsync(IEnumerable`1&lt;!0&gt; model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.InsertAsyncT0">
            <summary>设置 BaseRepository`1.InsertAsync(!0 model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.InsertT0">
            <summary>设置 BaseRepository`1.Insert(!0 model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.IsEmptyGet">
            <summary>设置 BaseRepository`1.get_IsEmpty() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.SaveChangeAsync">
            <summary>设置 BaseRepository`1.SaveChangeAsync() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.SaveChanges">
            <summary>设置 BaseRepository`1.SaveChanges() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.SqlQueryAsyncStringObjectArray">
            <summary>设置 BaseRepository`1.SqlQueryAsync(String sql, Object[] param) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.Tran_BeginAction">
            <summary>设置 BaseRepository`1.Tran_Begin(Action action) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.UpdateAsyncT0">
            <summary>设置 BaseRepository`1.UpdateAsync(!0 model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.UpdateAsyncT0StringArray">
            <summary>设置 BaseRepository`1.UpdateAsync(!0 model, String[] param) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances.UpdateT0">
            <summary>设置 BaseRepository`1.Update(!0 model) 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances._BulkSaveChangeAsyncb__4">
            <summary>设置 BaseRepository`1.&lt;BulkSaveChangeAsync&gt;b__4() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances._GetCountAsyncb__3a">
            <summary>设置 BaseRepository`1.&lt;GetCountAsync&gt;b__3a() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances._GetEntitiesAsyncb__32">
            <summary>设置 BaseRepository`1.&lt;GetEntitiesAsync&gt;b__32() 的 填充码</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimBaseRepository`1.AllInstances._GetEntityAsyncb__36">
            <summary>设置 BaseRepository`1.&lt;GetEntityAsync&gt;b__36() 的 填充码</summary>
        </member>
        <member name="T:PengBo.Framwork.Repository.Fakes.ShimCategoryRepository">
            <summary>PengBo.Framwork.Repository.CategoryRepository 的填充码类型</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimCategoryRepository.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimCategoryRepository.#ctor(PengBo.Framwork.Repository.CategoryRepository)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimCategoryRepository.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimCategoryRepository.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimCategoryRepository.Bind(PengBo.Framwork.IRepository.ICategoryRepository)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimCategoryRepository.Bind(PengBo.Framwork.IRepository.IBaseRepository{PengBo.Framwork.Domain.Category})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimCategoryRepository.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimCategoryRepository.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimCategoryRepository.ConstructorDbContext">
            <summary>设置 CategoryRepository.CategoryRepository(DbContext db) 的 填充码</summary>
        </member>
        <member name="T:PengBo.Framwork.Repository.Fakes.ShimCategoryRepository.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:PengBo.Framwork.Repository.Fakes.ShimTestRepository">
            <summary>PengBo.Framwork.Repository.TestRepository 的填充码类型</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimTestRepository.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimTestRepository.#ctor(PengBo.Framwork.Repository.TestRepository)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimTestRepository.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimTestRepository.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimTestRepository.Bind(PengBo.Framwork.IRepository.ITestRepository)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimTestRepository.Bind(PengBo.Framwork.IRepository.IBaseRepository{PengBo.Framwork.Domain.Test})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.ShimTestRepository.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimTestRepository.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.ShimTestRepository.ConstructorDbContext">
            <summary>设置 TestRepository.TestRepository(DbContext db) 的 填充码</summary>
        </member>
        <member name="T:PengBo.Framwork.Repository.Fakes.ShimTestRepository.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:PengBo.Framwork.Repository.Fakes.StubBaseRepository`1">
            <summary>PengBo.Framwork.Repository.BaseRepository`1 的存根类型</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.StubBaseRepository`1.#ctor(System.Data.Entity.DbContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.StubBaseRepository`1.InitializeStub">
            <summary>初始化 type StubBaseRepository 的新实例</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.StubBaseRepository`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.StubBaseRepository`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.StubBaseRepository`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:PengBo.Framwork.Repository.Fakes.StubCategoryRepository">
            <summary>PengBo.Framwork.Repository.CategoryRepository 的存根类型</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.StubCategoryRepository.#ctor(System.Data.Entity.DbContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.StubCategoryRepository.InitializeStub">
            <summary>初始化 type StubCategoryRepository 的新实例</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.StubCategoryRepository.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.StubCategoryRepository.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.StubCategoryRepository.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:PengBo.Framwork.Repository.Fakes.StubTestRepository">
            <summary>PengBo.Framwork.Repository.TestRepository 的存根类型</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.StubTestRepository.#ctor(System.Data.Entity.DbContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:PengBo.Framwork.Repository.Fakes.StubTestRepository.InitializeStub">
            <summary>初始化 type StubTestRepository 的新实例</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.StubTestRepository.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.StubTestRepository.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:PengBo.Framwork.Repository.Fakes.StubTestRepository.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
